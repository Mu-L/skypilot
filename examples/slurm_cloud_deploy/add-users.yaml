num_nodes: 2  # Must match the number in deploy.yaml

envs:
  USERS: "alice bob"  # List of users to create or update

# Using block scalar with chomping indicator (|) for the script
run: |
  set -e  # Changed from set -ex to reduce excessive logging and focus on errors
  
  # Get username - works on both AWS (ubuntu) and other clouds
  USERNAME=$(whoami)
  echo "Running as user: $USERNAME"
  echo "Node rank: $SKYPILOT_NODE_RANK"
  echo "Users to setup: $USERS"

  # Define barrier function
  create_barrier() {
    local barrier_name=$1
    local barrier_file="/tmp/${barrier_name}${SKYPILOT_TASK_ID}_barrier"
    
    if [ "$SKYPILOT_NODE_RANK" = "0" ]; then
      # Controller node creates and distributes barrier file
      echo "Creating barrier: $barrier_name"
      touch $barrier_file
      for node in $(echo "$SKYPILOT_NODE_IPS" | tail -n +2); do
        echo "Distributing barrier to: $node"
        scp -o StrictHostKeyChecking=no $barrier_file $node:$barrier_file
      done
    else
      # Non-controller nodes wait for barrier file
      echo "Waiting for barrier: $barrier_name"
      while [ ! -f "$barrier_file" ]; do
        echo "Waiting for $barrier_name barrier..."
        sleep 5
      done
      echo "Barrier $barrier_name received"
    fi
  }

  echo "Adding or updating users on all nodes with NFS home directories..."

  # Make sure NFS mount exists
  if [ ! -d "/mnt" ]; then
    # If this is a worker node, try mounting NFS once
    if [ "$SKYPILOT_NODE_RANK" != "0" ]; then
      CONTROLLER_IP=$(echo "$SKYPILOT_NODE_IPS" | head -n1)
      echo "Attempting to mount NFS from controller ($CONTROLLER_IP)..."
      sudo mkdir -p /mnt
      sudo mount -t nfs $CONTROLLER_IP:/mnt /mnt || true
      sleep 2
    fi
    
    # Check again after mount attempt
    if [ ! -d "/mnt" ]; then
      echo "ERROR: /mnt directory not found. Please make sure the cluster was deployed with deploy.yaml first."
      exit 1
    fi
  fi
  
  # Verify NFS is working by writing a test file from controller
  if [ "$SKYPILOT_NODE_RANK" = "0" ]; then
    echo "Verifying NFS is working..."
    echo "test-$(date)" | sudo tee /mnt/nfs-test-file > /dev/null
    echo "NFS test file created at /mnt/nfs-test-file"
  fi
  
  # Wait for NFS test file to become visible on all nodes
  create_barrier "nfs_verified"
  
  if [ "$SKYPILOT_NODE_RANK" != "0" ]; then
    if [ -f "/mnt/nfs-test-file" ]; then
      echo "NFS working, test file found: $(cat /mnt/nfs-test-file)"
    else
      echo "ERROR: NFS not working properly. Test file not visible."
      exit 1
    fi
  fi

  # Declare arrays to track new vs existing users
  declare -a new_users=()
  declare -a updated_users=()

  # Create users on controller node
  if [ "$SKYPILOT_NODE_RANK" = "0" ]; then
    # Create script content as a variable first to avoid YAML heredoc issues
    ADD_USER_SCRIPT='#!/bin/bash
  # Usage: sudo ./add_nfs_user.sh username
  # This script is idempotent - safe to run multiple times for the same user

  if [ $# -ne 1 ]; then
    echo "Usage: sudo $0 username"
    exit 1
  fi

  USERNAME=$1
  IS_NEW=0

  # Check if user already exists
  if id "$USERNAME" &>/dev/null; then
    echo "User $USERNAME already exists, ensuring configuration is correct..."
    IS_NEW=0
    
    # Create NFS home directory if it doesn't exist
    if [ ! -d "/mnt/$USERNAME" ]; then
      mkdir -p /mnt/$USERNAME
      chown $USERNAME:$USERNAME /mnt/$USERNAME
      chmod 700 /mnt/$USERNAME
    fi
    
    # Update home directory in passwd if not already correct
    CURRENT_HOME=$(getent passwd "$USERNAME" | cut -d: -f6)
    if [ "$CURRENT_HOME" != "/mnt/$USERNAME" ]; then
      echo "Updating home directory from $CURRENT_HOME to /mnt/$USERNAME"
      usermod -d /mnt/$USERNAME $USERNAME
    else
      echo "Home directory already correctly set to /mnt/$USERNAME"
    fi

    # Check if user is in sudo group, add if missing
    if ! groups "$USERNAME" | grep -q "\bsudo\b"; then
      echo "Adding $USERNAME to sudo group"
      usermod -aG sudo $USERNAME
    else
      echo "User $USERNAME is already in sudo group"
    fi
  else
    # Create user with home directory under /mnt
    echo "Creating new user: $USERNAME"
    useradd -m -d /mnt/$USERNAME $USERNAME
    IS_NEW=1

    # Copy template files if they exist
    if [ -d "/mnt/home_template" ]; then
      cp -r /mnt/home_template/. /mnt/$USERNAME/ 2>/dev/null || true
    fi

    # Set password to username (for testing only - change in production)
    echo "$USERNAME:$USERNAME" | chpasswd

    # Add to sudo group
    usermod -aG sudo $USERNAME
  fi

  # Ensure proper ownership and permissions
  chown -R $USERNAME:$USERNAME /mnt/$USERNAME
  chmod 700 /mnt/$USERNAME

  echo "User $USERNAME configuration complete with home at /mnt/$USERNAME"
  exit $IS_NEW'

    # Now write the script to a file
    echo "$ADD_USER_SCRIPT" > /tmp/add_nfs_user.sh
    sudo chmod +x /tmp/add_nfs_user.sh

    # Create users specified in the envs.USERS variable
    echo "Processing users on controller node"
    for user in $USERS; do
      echo "Setting up user: $user"
      sudo /tmp/add_nfs_user.sh $user
      is_new=$?
      if [ $is_new -eq 1 ]; then
        new_users+=("$user")
      else
        updated_users+=("$user")
      fi
      
      # Setup SSH directory if it doesn't exist
      echo "Setting up SSH for user: $user"
      sudo mkdir -p /mnt/$user/.ssh
      
      # Key management - handle with care to avoid prompts
      KEY_EXISTS=$(sudo test -f /mnt/$user/.ssh/id_rsa && echo "yes" || echo "no")
      
      if [ "$KEY_EXISTS" = "no" ]; then
        echo "SSH keys for $user don't exist, generating new ones"
        # Generate new SSH key
        sudo ssh-keygen -t rsa -f /mnt/$user/.ssh/id_rsa -N "" -q
        # Create authorized_keys file
        sudo cp /mnt/$user/.ssh/id_rsa.pub /mnt/$user/.ssh/authorized_keys
      else
        echo "SSH keys for $user already exist, preserving them"
        # Check if authorized_keys exists
        if [ ! -f "/mnt/$user/.ssh/authorized_keys" ]; then
          echo "Creating authorized_keys file for $user"
          if [ -f "/mnt/$user/.ssh/id_rsa.pub" ]; then
            sudo cp /mnt/$user/.ssh/id_rsa.pub /mnt/$user/.ssh/authorized_keys
          else
            # If public key is missing but private key exists, warn
            echo "WARNING: Private key exists but public key missing for $user"
            echo "Creating empty authorized_keys file"
            sudo touch /mnt/$user/.ssh/authorized_keys
          fi
        fi
      fi
      
      # Fix permissions
      sudo chown -R $user:$user /mnt/$user/.ssh
      sudo chmod 700 /mnt/$user/.ssh
      sudo chmod 600 /mnt/$user/.ssh/id_rsa 2>/dev/null || true
      sudo chmod 644 /mnt/$user/.ssh/authorized_keys
    done
    
    # Create a marker file to indicate users are set up
    echo "$(date): Users set up on controller node" | sudo tee /mnt/users-setup-complete > /dev/null
    
    # Copy the user creation script to all worker nodes
    echo "Copying user creation script to worker nodes"
    for node in $(echo "$SKYPILOT_NODE_IPS" | tail -n +2); do
      echo "Copying script to $node"
      scp -o StrictHostKeyChecking=no /tmp/add_nfs_user.sh $node:/tmp/
    done
  fi
  
  # Create barrier to ensure script is copied before continuing
  create_barrier "add_user_script_copied"
  
  # Create users on worker nodes
  if [ "$SKYPILOT_NODE_RANK" != "0" ]; then
    # Wait briefly for controller to finish setup
    if [ -f "/mnt/users-setup-complete" ]; then
      echo "Controller user setup confirmed: $(cat /mnt/users-setup-complete)"
    else
      echo "Controller user setup marker not found, but continuing anyway"
    fi
  
    echo "Processing users on worker node"
    for user in $USERS; do
      echo "Setting up user: $user"
      sudo /tmp/add_nfs_user.sh $user || { echo "Failed to set up user $user"; exit 1; }
    done
    
    # Create a marker to indicate this worker has completed user setup
    echo "$(date): Users set up on worker node $(hostname)" | sudo tee /mnt/users-setup-worker-$(hostname) > /dev/null
  fi
  
  # Create barrier to ensure users are created before continuing
  create_barrier "users_created"
  
  # Sync the passwd, group, and shadow files to all nodes for consistent UIDs and GIDs
  if [ "$SKYPILOT_NODE_RANK" = "0" ]; then
    echo "Synchronizing user accounts across all nodes"
    # Create temporary copies of system files with sudo
    sudo cp /etc/passwd /tmp/passwd.tmp
    sudo cp /etc/group /tmp/group.tmp
    sudo cp /etc/shadow /tmp/shadow.tmp
    sudo chown $USERNAME:$USERNAME /tmp/passwd.tmp /tmp/group.tmp /tmp/shadow.tmp
    
    # Copy password and group files to all worker nodes
    for node in $(echo "$SKYPILOT_NODE_IPS" | tail -n +2); do
      echo "Syncing account files to $node"
      scp -o StrictHostKeyChecking=no /tmp/passwd.tmp $node:/tmp/passwd
      scp -o StrictHostKeyChecking=no /tmp/group.tmp $node:/tmp/group
      scp -o StrictHostKeyChecking=no /tmp/shadow.tmp $node:/tmp/shadow
      ssh -o StrictHostKeyChecking=no $node "sudo cp /tmp/passwd /etc/passwd && sudo cp /tmp/group /etc/group && sudo cp /tmp/shadow /etc/shadow && sudo rm /tmp/passwd /tmp/group /tmp/shadow"
    done
    
    # Clean up temporary files
    sudo rm /tmp/passwd.tmp /tmp/group.tmp /tmp/shadow.tmp
  fi
  
  # Create barrier to ensure all account synchronization is complete
  create_barrier "account_sync_complete"
  
  # Create a summary message on the controller
  if [ "$SKYPILOT_NODE_RANK" = "0" ]; then
    echo ""
    echo "=== USER SETUP SUMMARY ==="
    
    if [ ${#new_users[@]} -gt 0 ]; then
      echo "New users created:"
      for user in "${new_users[@]}"; do
        echo "  - $user (home directory: /mnt/$user)"
      done
    else
      echo "No new users were created."
    fi
    
    if [ ${#updated_users[@]} -gt 0 ]; then
      echo "Existing users updated:"
      for user in "${updated_users[@]}"; do
        echo "  - $user (home directory: /mnt/$user)"
      done
    fi
    
    echo ""
    echo "All users have:"
    echo "  - Home directories on NFS at /mnt/<username>"
    echo "  - SSH keys for passwordless access"
    echo "  - Sudo access (can be removed if not needed)"
    echo "  - Default password set to username (change for production use)"
    echo ""
    echo "Since homes are on NFS, users can log in from any node with their credentials"
  fi
  
  echo "User setup completed successfully on node $SKYPILOT_NODE_RANK"
  exit 0
